#!/usr/bin/env python3
"""
Script to autogenerate the files necessary to add a new
job to the project.
"""
import os
import sys

from string import Template
from textwrap import dedent

BASE = os.path.dirname(os.path.realpath(__file__))

def generate_cargo(directory, job):
    file_contents = Template(dedent("""\
        cargo-features = ["profile-rustflags"]

        [package]
        name = "$job-lib"
        version = "0.1.0"
        edition = "2021"

        [lib]
        crate-type = ["staticlib"]
        path = "lib.rs"

        [dependencies]
        libc = "0.2"
        sea_rs_common = { path = "../../sea_rs_common" }

        [profile.dev]
        linker = "lld"

        panic = "abort"
        opt-level = 2

        rustflags = [
            "-Clinker-plugin-lto",
            "-Clinker=clang-14",
            "-Clink-arg=-fuse-ld=lld",
            "-Zemit-thin-lto=no",
        ]

        [profile.release]
        panic = "abort"
        opt-level = 2

        rustflags = [
            "-Clinker-plugin-lto",
            "-Clinker=clang-14",
            "-Clink-arg=-fuse-ld=lld",
            "-Zemit-thin-lto=no",
        ]
    """)).substitute(job=job)

    with open(f"{directory}/Cargo.toml", "w") as file:
        file.write(file_contents)


def generate_toolchain(directory):
    file_contents = Template(dedent("""\
        [toolchain]
        channel = "nightly-2022-08-01"
    """)).substitute()

    with open(f"{directory}/rust-toolchain.toml", "w") as file:
        file.write(file_contents)


def generate_cmake_lists(directory, job):
    file_contents = Template(dedent("""\
        c_rust_llvm($job $job.c)

        sea_add_unsat_test($job)
    """)).substitute(job=job)

    with open(f"{directory}/CMakeLists.txt", "w") as file:
        file.write(file_contents)


def generate_rust(directory, job):
    function_name = job.replace("-", "_")

    file_contents = Template(dedent("""\
        #[no_mangle]
        pub extern \"C\" fn $function_name() -> T {
            T
        }
    """)).substitute(function_name=function_name)

    with open(f"{directory}/lib.rs", "w") as file:
        file.write(file_contents)


def generate_c(directory, job):
    file_contents = Template(dedent("""\
        #include <stdio.h>

        #include "seahorn.h"
        #include "inc/lib.h"

        int main() {
        
            return 42;
        }
    """)).substitute()

    with open(f"{directory}/{job}.c", "w") as file:
        file.write(file_contents)


def update_cmake(job):
    cmake_file = os.path.join(BASE, "src", "CMakeLists.txt")
    with open(cmake_file, "a") as file:
        file.write(f"add_subdirectory(rust-jobs/{job})\n")


def main():
    if len(sys.argv) < 2:
        print("Error: Please specify a name for your job.")
    else:
        args = len(sys.argv)
        for i in range(1, args):
            job = sys.argv[i]
            directory = os.path.join(BASE, "src", "rust-jobs", job)
            if os.path.isdir(directory):
                print(f"Error: The job \"{job}\" already exists.")
                continue
            os.mkdir(directory)
            generate_cargo(directory, job)
            generate_toolchain(directory)
            generate_cmake_lists(directory, job)
            generate_rust(directory, job)
            generate_c(directory, job)
            update_cmake(job)
            print(f"Created job: {job}")


if __name__ == "__main__":
    main()
